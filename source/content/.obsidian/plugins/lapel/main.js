/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var E=Object.defineProperty;var P=Object.getOwnPropertyDescriptor;var y=Object.getOwnPropertyNames;var C=Object.prototype.hasOwnProperty;var A=(n,i)=>{for(var s in i)E(n,s,{get:i[s],enumerable:!0})},B=(n,i,s,e)=>{if(i&&typeof i=="object"||typeof i=="function")for(let t of y(i))!C.call(n,t)&&t!==s&&E(n,t,{get:()=>i[t],enumerable:!(e=P(i,t))||e.enumerable});return n};var V=n=>B(E({},"__esModule",{value:!0}),n);var D={};A(D,{default:()=>b});module.exports=V(D);var M=require("obsidian");var g=require("@codemirror/view"),f=require("obsidian"),w=require("@codemirror/language"),a=require("@codemirror/state"),_=[1,2,3,4,5,6],v="cm-heading-marker",k=class extends g.GutterMarker{constructor(s,e,t,r){super();this.view=s;this.headingLevel=e;this.from=t;this.to=r}toDOM(){let s=createDiv({cls:v});return s.dataset.level=String(this.headingLevel),s}eq(s){return this.headingLevel===s.headingLevel}};function x(n){let i=g.ViewPlugin.fromClass(class{constructor(e){this.view=e,this.markers=this.buildMarkers(e)}buildMarkers(e){let{viewport:t}=e,r=new a.RangeSetBuilder;return(0,w.syntaxTree)(e.state).iterate({from:t.from,to:t.to,enter:({type:o,from:h,to:d})=>{var m;let u=/header-(\d)$/.exec((m=o.prop(w.lineClassNodeProp))!=null?m:"");if(u){let l=Number(u[1]),p=new k(e,l,h,d);r.add(h,d,p)}}}),r.finish()}update(e){if(!e.state.field(f.editorLivePreviewField)){this.markers=a.RangeSet.empty;return}(e.docChanged||e.viewportChanged)&&(this.markers=this.buildMarkers(this.view))}}),s=n?a.Prec.high:a.Prec.low;return[i,s((0,g.gutter)({class:"cm-lapel",markers(e){var t;return((t=e.plugin(i))==null?void 0:t.markers)||a.RangeSet.empty},domEventHandlers:{click:(e,t,r)=>{var o,h;if((o=r.targetNode)!=null&&o.instanceOf(HTMLElement)){let d=r.targetNode;if(!d.hasClass(v))return!1;if(d.hasClass("has-active-menu"))return!0;let u=0;(h=e.plugin(i))==null||h.markers.between(t.from,t.to,(l,p,c)=>{u=c.headingLevel});let m=new f.Menu;for(let l of _)m.addItem(p=>p.setIcon("lucide-heading-"+l).setTitle(`Heading ${l}`).setChecked(l===u).onClick(()=>{let c=e.state.doc.lineAt(t.from),T=c.text.replace(/^#{1,6} /,"");e.dispatch({changes:{from:c.from,to:c.to,insert:`${"#".repeat(l)} ${T}`}})}));return m.setParentElement(d).showAtMouseEvent(r),!0}return!1},mousedown:(e,t,r)=>{var o;return(o=r.targetNode)!=null&&o.instanceOf(HTMLElement)?r.targetNode.hasClass(v):!1}}}))]}var S=require("obsidian"),N={showBeforeLineNumbers:!0},L=class extends S.PluginSettingTab{constructor(s,e){super(s,e);this.plugin=e}display(){let{containerEl:s}=this;s.empty(),s.createEl("h3",{text:"Appearance"}),new S.Setting(s).setName("Show before line numbers").setDesc("Toggle whether the heading markers are shown before or after the line numbers in the gutter.").addToggle(e=>e.setValue(this.plugin.settings.showBeforeLineNumbers).onChange(async t=>{this.plugin.updateSettings(()=>({showBeforeLineNumbers:t}))}))}};var b=class extends M.Plugin{constructor(){super(...arguments);this.extensions=[]}async onload(){await this.loadSettings(),this.extensions.push(x(this.settings.showBeforeLineNumbers)),this.registerEditorExtension(this.extensions),this.registerSettingsTab()}async loadSettings(){this.settings=Object.assign({},N,await this.loadData())}registerSettingsTab(){this.addSettingTab(new L(this.app,this))}async updateSettings(s){let e=s(this.settings),t=Object.assign({},this.settings,e);if(this.settings.showBeforeLineNumbers!==e.showBeforeLineNumbers){let r=x(t.showBeforeLineNumbers);this.extensions[0]=r,this.app.workspace.updateOptions()}this.settings=t,await this.saveData(this.settings)}};

/* nosourcemap */