/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var P=Object.create;var N=Object.defineProperty;var D=Object.getOwnPropertyDescriptor;var k=Object.getOwnPropertyNames;var L=Object.getPrototypeOf,$=Object.prototype.hasOwnProperty;var I=o=>N(o,"__esModule",{value:!0});var x=(o,t)=>{I(o);for(var e in t)N(o,e,{get:t[e],enumerable:!0})},z=(o,t,e)=>{if(t&&typeof t=="object"||typeof t=="function")for(let i of k(t))!$.call(o,i)&&i!=="default"&&N(o,i,{get:()=>t[i],enumerable:!(e=D(t,i))||e.enumerable});return o},b=o=>z(I(N(o!=null?P(L(o)):{},"default",o&&o.__esModule&&"default"in o?{get:()=>o.default,enumerable:!0}:{value:o,enumerable:!0})),o);x(exports,{default:()=>O});var u=b(require("obsidian"));var f=b(require("obsidian"));var l;(function(i){i.FILENAME="filename",i.FRONTMATTER="frontmatter",i.HEADING="heading"})(l||(l={}));var d;(function(a){a.REMOVE="remove",a.REPLACE_WITH_SPACE="replace_with_space",a.REPLACE_WITH_DASH="replace_with_dash",a.REPLACE_WITH_UNDERSCORE="replace_with_underscore",a.CUSTOM="custom"})(d||(d={}));var c;(function(n){n.ALL="all",n.FILENAME_FRONTMATTER="filename_frontmatter",n.FILENAME_HEADING="filename_heading",n.FRONTMATTER_HEADING="frontmatter_heading"})(c||(c={}));var R={defaultTitleSource:l.FILENAME,illegalCharHandling:d.REMOVE,customReplacement:"",updateOtherTitlesWithSanitizedVersion:!1,syncMode:c.ALL,notificationPreference:"all",mobileNotificationPreference:null};var M=class extends f.PluginSettingTab{constructor(t,e){super(t,e);this.plugin=e}display(){let{containerEl:t}=this;t.empty(),new f.Setting(t).setName("Default title source").setDesc("Choose which source to use by default when synchronizing titles").addDropdown(i=>i.addOption(l.FILENAME,"Filename").addOption(l.FRONTMATTER,"Frontmatter title").addOption(l.HEADING,"First heading").setValue(this.plugin.settings.defaultTitleSource).onChange(async n=>{this.plugin.settings.defaultTitleSource=n,await this.plugin.saveSettings()})),new f.Setting(t).setName("Sync mode").setDesc("Choose which title locations to sync (which of the three title places to update)").addDropdown(i=>i.addOption(c.ALL,"All (Filename + Frontmatter + Heading)").addOption(c.FILENAME_FRONTMATTER,"Filename + Frontmatter").addOption(c.FILENAME_HEADING,"Filename + Heading").addOption(c.FRONTMATTER_HEADING,"Frontmatter + Heading").setValue(this.plugin.settings.syncMode).onChange(async n=>{this.plugin.settings.syncMode=n,await this.plugin.saveSettings()})),new f.Setting(t).setName("Illegal character handling").setHeading(),new f.Setting(t).setName("Illegal character handling").setDesc("Choose how to handle illegal characters when updating filenames").addDropdown(i=>i.addOption(d.REMOVE,"Remove illegal characters").addOption(d.REPLACE_WITH_SPACE,"Replace with space").addOption(d.REPLACE_WITH_DASH,"Replace with dash (-)").addOption(d.REPLACE_WITH_UNDERSCORE,"Replace with underscore (_)").addOption(d.CUSTOM,"Custom replacement").setValue(this.plugin.settings.illegalCharHandling).onChange(async n=>{this.plugin.settings.illegalCharHandling=n,n===d.CUSTOM?e.settingEl.style.display="block":e.settingEl.style.display="none",await this.plugin.saveSettings()}));let e=new f.Setting(t).setName("Custom replacement character").setDesc("Specify a custom character to replace illegal characters with").addText(i=>i.setValue(this.plugin.settings.customReplacement).onChange(async n=>{this.plugin.settings.customReplacement=n,await this.plugin.saveSettings()}));this.plugin.settings.illegalCharHandling!==d.CUSTOM&&(e.settingEl.style.display="none"),new f.Setting(t).setName("Update all titles with sanitized version").setDesc("When updating from frontmatter or heading to filename, also update the source with the sanitized version (without illegal characters)").addToggle(i=>i.setValue(this.plugin.settings.updateOtherTitlesWithSanitizedVersion).onChange(async n=>{this.plugin.settings.updateOtherTitlesWithSanitizedVersion=n,await this.plugin.saveSettings()})),new f.Setting(t).setName("Notifications").setHeading(),new f.Setting(t).setName("Notification preference").setDesc("Choose when to show notifications for sync operations. 'All' shows notifications for both successful syncs and errors. 'Errors only' shows notifications only when sync operations fail. 'None' suppresses all sync notifications.").addDropdown(i=>i.addOption("all","All notifications").addOption("errors","Errors only").addOption("none","No notifications").setValue(this.plugin.settings.notificationPreference).onChange(async n=>{this.plugin.settings.notificationPreference=n,await this.plugin.saveSettings()})),new f.Setting(t).setName("Mobile notification preference").setDesc("Override notification preference specifically for mobile devices. Leave as 'Same as desktop' to use the same setting as above, or choose a different preference for mobile use.").addDropdown(i=>{var n;return i.addOption("null","Same as desktop").addOption("all","All notifications").addOption("errors","Errors only").addOption("none","No notifications").setValue(((n=this.plugin.settings.mobileNotificationPreference)==null?void 0:n.toString())||"null").onChange(async a=>{this.plugin.settings.mobileNotificationPreference=a==="null"?null:a,await this.plugin.saveSettings()})})}};var w=b(require("obsidian")),A=class{constructor(t){this.settings=t}showSuccess(t){this.shouldShowNotification("success")&&new w.Notice(t)}showError(t){this.shouldShowNotification("error")&&new w.Notice(t)}showInfo(t){this.shouldShowNotification("info")&&new w.Notice(t)}shouldShowNotification(t){switch(this.getEffectiveNotificationPreference()){case"none":return!1;case"errors":return t==="error";case"all":return!0;default:return!0}}getEffectiveNotificationPreference(){return w.Platform.isMobile&&this.settings.mobileNotificationPreference!==null?this.settings.mobileNotificationPreference:this.settings.notificationPreference}};var O=class extends u.Plugin{async onload(){await this.loadSettings(),this.notificationHelper=new A(this.settings),this.addSettingTab(new M(this.app,this)),this.addCommand({id:"sync-titles-default",name:"Sync titles using default source",checkCallback:t=>this.app.workspace.getActiveFile()?(t||this.syncTitlesWithDefault(),!0):!1}),this.addCommand({id:"sync-titles-from-filename",name:"Sync titles using filename as source",checkCallback:t=>this.app.workspace.getActiveFile()?(t||this.syncTitles(l.FILENAME),!0):!1}),this.addCommand({id:"sync-titles-from-frontmatter",name:"Sync titles using frontmatter as source",checkCallback:t=>this.app.workspace.getActiveFile()?(t||this.syncTitles(l.FRONTMATTER),!0):!1}),this.addCommand({id:"sync-titles-from-heading",name:"Sync titles using first heading as source",checkCallback:t=>this.app.workspace.getActiveFile()?(t||this.syncTitles(l.HEADING),!0):!1}),this.registerEvent(this.app.workspace.on("file-menu",(t,e)=>{e instanceof u.TFolder&&(t.addItem(i=>{i.setTitle("Sync titles in folder (default source)").setIcon("sync").onClick(async()=>{await this.syncTitlesInFolder(e,this.settings.defaultTitleSource)})}),t.addItem(i=>{i.setTitle("Sync titles in folder (from filename)").setIcon("file-text").onClick(async()=>{await this.syncTitlesInFolder(e,l.FILENAME)})}),t.addItem(i=>{i.setTitle("Sync titles in folder (from frontmatter)").setIcon("tag").onClick(async()=>{await this.syncTitlesInFolder(e,l.FRONTMATTER)})}),t.addItem(i=>{i.setTitle("Sync titles in folder (from heading)").setIcon("heading").onClick(async()=>{await this.syncTitlesInFolder(e,l.HEADING)})}))}))}onunload(){}async loadSettings(){this.settings=Object.assign({},R,await this.loadData()),this.notificationHelper&&(this.notificationHelper=new A(this.settings))}async saveSettings(){await this.saveData(this.settings),this.notificationHelper=new A(this.settings)}syncTitlesWithDefault(){this.syncTitles(this.settings.defaultTitleSource)}async syncTitles(t){let e=this.app.workspace.getActiveFile();if(!e){this.notificationHelper.showError("No active file");return}try{if(await this.areTitlesToSyncAlreadySynchronized(e)){this.notificationHelper.showInfo("All titles that should be synced are already synchronized");return}switch(t){case l.FILENAME:await this.syncFromFilename(e);break;case l.FRONTMATTER:await this.syncFromFrontmatter(e);break;case l.HEADING:await this.syncFromHeading(e);break}this.notificationHelper.showSuccess("Titles synchronized successfully")}catch(i){this.notificationHelper.showError(`Error synchronizing titles: ${i.message}`),console.error("Error synchronizing titles:",i)}}async syncTitlesInFolder(t,e){try{let i=this.getAllMarkdownFilesInFolder(t);if(i.length===0){this.notificationHelper.showInfo(`No markdown files found in folder "${t.name}"`);return}let n=0,a=0,s=0;this.notificationHelper.showInfo(`Starting bulk title sync for ${i.length} files in "${t.name}"...`);for(let h of i)try{if(await this.areTitlesToSyncAlreadySynchronized(h)){a++;continue}switch(e){case l.FILENAME:await this.syncFromFilename(h);break;case l.FRONTMATTER:await this.syncFromFrontmatter(h);break;case l.HEADING:await this.syncFromHeading(h);break}n++}catch(p){s++,console.error(`Error processing file ${h.path}:`,p)}let r=`Bulk sync completed: ${n} updated, ${a} skipped, ${s} errors`;s>0?this.notificationHelper.showError(r):this.notificationHelper.showSuccess(r)}catch(i){this.notificationHelper.showError(`Error during bulk title sync: ${i.message}`),console.error("Error during bulk title sync:",i)}}getAllMarkdownFilesInFolder(t){let e=[],i=n=>{for(let a of n.children)a instanceof u.TFile&&a.extension==="md"?e.push(a):a instanceof u.TFolder&&i(a)};return i(t),e}async areTitlesToSyncAlreadySynchronized(t){var h,p;let e=t.basename,i=(h=this.app.metadataCache.getFileCache(t))==null?void 0:h.frontmatter,n=i==null?void 0:i.title,a=(p=this.app.metadataCache.getFileCache(t))==null?void 0:p.headings,s=a==null?void 0:a.find(S=>S.level===1),r=s==null?void 0:s.heading;switch(this.settings.syncMode){case c.ALL:return!n||!r?!1:e===n&&n===r;case c.FILENAME_FRONTMATTER:return n?e===n:!1;case c.FILENAME_HEADING:return r?e===r:!1;case c.FRONTMATTER_HEADING:return!n||!r?!1:n===r;default:return!1}}async syncFromFilename(t){let e=t.basename;await this.updateTitlesBasedOnSyncMode(t,e)}async syncFromFrontmatter(t){var a;let e=(a=this.app.metadataCache.getFileCache(t))==null?void 0:a.frontmatter;if(!e||!e.title)throw new Error("No title found in frontmatter");let i=e.title,n=this.sanitizeFilename(i);if(n!==i)if(this.settings.updateOtherTitlesWithSanitizedVersion)this.notificationHelper.showInfo(`Title contains illegal characters. All titles will be updated with the sanitized version: "${n}"`),await this.updateTitlesBasedOnSyncMode(t,n);else{this.notificationHelper.showInfo(`Title contains illegal characters. Filename will be sanitized to: "${n}"`);let s=this.settings.syncMode!==c.FRONTMATTER_HEADING,r=this.shouldSyncFrontmatter(),h=this.shouldSyncHeading();s&&await this.updateFilename(t,n),(r||h)&&await this.updateFrontmatterAndOrHeading(t,i)}else await this.updateTitlesBasedOnSyncMode(t,i)}async syncFromHeading(t){var r;let e=(r=this.app.metadataCache.getFileCache(t))==null?void 0:r.headings,i=e==null?void 0:e.find(h=>h.level===1),n=i==null?void 0:i.heading;if(!n)throw new Error("No level 1 heading found in the file. Please add a level 1 heading or use another source for synchronization.");let a=n,s=this.sanitizeFilename(a);if(s!==a)if(this.settings.updateOtherTitlesWithSanitizedVersion)this.notificationHelper.showInfo(`Title contains illegal characters. All titles will be updated with the sanitized version: "${s}"`),await this.updateTitlesBasedOnSyncMode(t,s);else{this.notificationHelper.showInfo(`Title contains illegal characters. Filename will be sanitized to: "${s}"`);let h=this.settings.syncMode!==c.FRONTMATTER_HEADING,p=this.shouldSyncFrontmatter(),S=this.shouldSyncHeading();h&&await this.updateFilename(t,s),(p||S)&&await this.updateFrontmatterAndOrHeading(t,a)}else await this.updateTitlesBasedOnSyncMode(t,a)}sanitizeFilename(t){let e=/[\/\\:*?"<>|#^[\]]/g;if(!e.test(t))return t;switch(this.settings.illegalCharHandling){case d.REMOVE:return t.replace(e,"");case d.REPLACE_WITH_SPACE:return t.replace(e," ");case d.REPLACE_WITH_DASH:return t.replace(e,"-");case d.REPLACE_WITH_UNDERSCORE:return t.replace(e,"_");case d.CUSTOM:{let i=this.settings.customReplacement||"";return t.replace(e,i)}default:return t.replace(e,"")}}shouldSyncFilename(){return this.settings.syncMode!==c.FRONTMATTER_HEADING}shouldSyncFrontmatter(){return this.settings.syncMode!==c.FILENAME_HEADING}shouldSyncHeading(){return this.settings.syncMode!==c.FILENAME_FRONTMATTER}async updateTitlesBasedOnSyncMode(t,e){let i=this.shouldSyncFilename(),n=this.shouldSyncFrontmatter(),a=this.shouldSyncHeading();i&&await this.updateFilename(t,e),(n||a)&&await this.updateFrontmatterAndOrHeading(t,e)}async updateFilename(t,e){var i;t.basename!==e&&await this.app.fileManager.renameFile(t,`${((i=t.parent)==null?void 0:i.path)?t.parent.path+"/":""}${e}${t.extension?"."+t.extension:""}`)}async updateFrontmatterAndOrHeading(t,e){await this.app.vault.process(t,i=>this.updateFileContents(i,e,t,this.shouldSyncFrontmatter(),this.shouldSyncHeading()))}async updateFrontmatterAndHeading(t,e){await this.updateFrontmatterAndOrHeading(t,e)}findFirstHeadingPosition(t,e){let i={hasHeading:!1,position:-1,text:""},n=this.app.metadataCache.getFileCache(e);if(!n||!n.headings)return i;let a=n.headings.find(r=>r.level===1);if(!a)return i;i.hasHeading=!0,i.text=a.heading;let s=`# ${a.heading}`;return i.position=t.indexOf(s),i}updateFileContents(t,e,i,n=!0,a=!0){let s=t,r=this.findFirstHeadingPosition(s,i),h=r.hasHeading,p=r.position,S=r.text,T=(0,u.getFrontMatterInfo)(s),v=T.exists;if(n)if(v){let m=T.frontmatter;try{let F=(0,u.parseYaml)(m)||{};F.title=e;let y=(0,u.stringifyYaml)(F);s=s.substring(0,T.from)+y+s.substring(T.to)}catch(F){console.error("Error parsing frontmatter:",F);let y=/^title:\s*(.*)$/m;if(m.match(y)){let g=m.replace(y,`title: ${e}`);s=s.substring(0,T.from)+g+s.substring(T.to)}else{let g=`title: ${e}
${m}`;s=s.substring(0,T.from)+g+s.substring(T.to)}}}else{let F=(0,u.stringifyYaml)({title:e});h&&p>=0?s=`---
${F}---

`+s.substring(0,p).trim()+(p>0?`

`:"")+s.substring(p):s=`---
${F}---

`+s}if(a){let m=(0,u.getFrontMatterInfo)(s),F=m.exists,y=/^#\s+(.+)$/m,H=s.match(y);if(H){let g=H[0],E=s.indexOf(g);s=s.substring(0,E)+`# ${e}`+s.substring(E+g.length)}else if(F){let g=m.contentStart,E=s.substring(g).trim();E.length>0?s=s.substring(0,g)+`
# ${e}

`+E:s=s.substring(0,g)+`
# ${e}`;let C=m.to,_=s.substring(C);s=s.substring(0,C)+`

`+_.trimStart()}else{let g=s.trim();g.length>0?s=`# ${e}

${g}`:s=`# ${e}`}}return s}};0&&(module.exports={});

/* nosourcemap */